/*
 * errorcode.h: Intel(r) TXT error definitions for ERRORCODE config register
 *
 * Copyright (c) 2003-2011, Intel Corporation
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#ifndef __TXT_ERRORCODE_H__
#define __TXT_ERRORCODE_H__

/*
 * format of ERRORCODE register for tboot errors
 *
 * Bit     Description
 * ---     -----------
 * 31      '1' (Valid)
 * 30      '1' (External)
 * 29:16   reserved
 * 15      '1' (error not from ACM)
 * 14:12   '0' - tboot, '1'-'7' - kernel/VMM specific
 * 11:0    tboot error code (TB_ERR_*)
 */
typedef union {
    uint64_t _raw;
    struct {
        uint64_t   error      : 12;  /* bits 11:0 */
        uint64_t   src        : 3;   /* bits 14:12 */
        uint64_t   non_acm    : 1;   /* bit 15 */
        uint64_t   reserved   : 14;  /* bits 29:16 */
        uint64_t   external   : 1;   /* bit 30 */
        uint64_t   valid      : 1;   /* bit 31 */
    };
} tboot_errorcode_t;

/*
 * format of ERRORCODE register for ACM errors
 *
 * Bit     Description
 * ---     -----------
 * 31      '1' (Valid)
 * 30      '1' (External)
 * 29:25   Reserved
 * 24:16   TPM command return code, valid only for progress code 0dh and error
 *         code 1010
 * 24:16   LCP v2 minor error code, valid only for progress code 10h
 *         24:22   Index (in LCP_POLICY_DATA::PolicyLists) of item responsible
 *                 for error
 *         21:16   Minor error code (see progress code 10h below)
 * 15      '0' (error generated by AC module)
 * 14:10   AC module error codes
 * 9:4     AC module progress codes
 * 3:0     AC module type
 *         0000  BIOS
 *         0001  SINIT
 *         0010 - 1111 Reserved for future use
 */
typedef union {
    uint64_t _raw;
    struct {
        uint64_t   acm_type   : 4;   /* bits 3:0 */
        uint64_t   progress   : 6;   /* bits 9:4 */
        uint64_t   error      : 5;   /* bits 14:10 */
        uint64_t   non_acm    : 1;   /* bit 15 */
        union __attribute__((packed)){
            struct __attribute__((packed)) {  /* progress=0x0d, error=1010 */
                uint32_t tpm_err    : 9;    /* bits 24:16 */
                uint32_t reserved1  : 5;    /* bits 29:25 */
            };
            struct __attribute__((packed)) {  /* progress=0x10 */
                uint32_t lcp_minor  : 6;    /* bits 21:16 */
                uint32_t lcp_index  : 3;    /* bits 24:22 */
                uint32_t reserved2  : 5;    /* bits 29:25 */
            };
        }; /* sub-error */

        uint64_t   external   : 1;   /* bit 30 */
        uint64_t   valid      : 1;   /* bit 31 */
    };
} acmod_errorcode_t;

static inline void display_txt_errorcode(uint64_t raw_err)
{
    txt_errorcode_t err = { ._raw = raw_err };

    /* AC module error (don't know how to parse other errors) */
    if ( err.valid ) {
        if ( err.external == 0 )            /* processor error */
            printk("\t processor error: 0x%x\n", (uint32_t)err.type);
        else {                              /* SW error (tboot or ACM) */
            tboot_errorcode_t tboot_err;
            tboot_err._raw = err._raw;
            if ( tboot_err.non_acm  ) {     /* tboot or kernel error */
                if ( tboot_err.src == 0 ) {
                    printk("\t tboot error :\n");
                    printk("\t     error: %d\n", tboot_err.error);
                }
                else {
                    printk("\t kernel error (%d) :\n", tboot_err.src);
                    printk("\t     error: 0x%x\n", tboot_err.error);
                    printk("\t     reserved: 0x%x\n", tboot_err.reserved);
                }
            }
            else {                          /* ACM error */
                acmod_errorcode_t acmod_err;
                acmod_err._raw = err._raw;
                printk("\t AC module error :\n");
                printk("\t     acm_type: 0x%x\n", acmod_err.acm_type);
                printk("\t     progress: 0x%02x\n", acmod_err.progress);
                printk("\t     error: 0x%x\n", acmod_err.error);
                /* error = 0x0a, progress = 0x0d => error2 is a TPM error */
                if ( acmod_err.error == 0x0a && acmod_err.progress == 0x0d )
                    printk("\t     TPM error code: 0x%x\n", acmod_err.tpm_err);
                /* error = 0x10 => error2 is an LCP v2 error */
                else if ( acmod_err.progress == 0x10 && acmod_err.lcp_minor != 0 ) {
                    printk("\t     LCP minor error code: 0x%x\n",
                           acmod_err.lcp_minor);
                    printk("\t     LCP index: 0x%x\n", acmod_err.lcp_index);
                }
            }
        }
    }
}

#endif    /* __TXT_ERRORCODE_H__ */


/*
 * Local variables:
 * mode: C
 * c-set-style: "BSD"
 * c-basic-offset: 4
 * tab-width: 4
 * indent-tabs-mode: nil
 * End:
 */
